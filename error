/*
 * NRF NFDiscovery Service
 *
 * NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.1.0.alpha-4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
    // "encoding/json"
    "net/http"
    "strings"
    // "github.com/gorilla/mux"
)

// A NFInstancesStoreApiController binds http requests to an api service and writes the service results to the http response
type NFInstancesStoreApiController struct {
    service NFInstancesStoreApiServicer
}

// NewNFInstancesStoreApiController creates a default api controller
func NewNFInstancesStoreApiController(s NFInstancesStoreApiServicer) Router {
    return &NFInstancesStoreApiController{service: s}
}

// Routes returns all of the api route for the NFInstancesStoreApiController
func (c *NFInstancesStoreApiController) Routes() Routes {
    return Routes{
        {
            "SearchNFInstances",
            strings.ToUpper("Get"),
            "/nnrf-disc/v1/nf-instances",
            c.SearchNFInstances,
        },
    }
}

// SearchNFInstances - Search a collection of NF Instances
func (c *NFInstancesStoreApiController) SearchNFInstances(w http.ResponseWriter, r *http.Request) {
    query := r.URL.Query()
    targetNfType := query.Get("targetNfType")
    requesterNfType := query.Get("requesterNfType")
    acceptEncoding := r.Header.Get("acceptEncoding")
    requesterNfInstanceId := query.Get("requesterNfInstanceId")
    serviceNames := strings.Split(query.Get("serviceNames"), ",")
    requesterNfInstanceFqdn := query.Get("requesterNfInstanceFqdn")
    targetPlmnList := strings.Split(query.Get("targetPlmnList"), ",")
    requesterPlmnList := strings.Split(query.Get("requesterPlmnList"), ",")
    targetNfInstanceId := query.Get("targetNfInstanceId")
    targetNfFqdn := query.Get("targetNfFqdn")
    hnrfUri := query.Get("hnrfUri")
    snssais := strings.Split(query.Get("snssais"), ",")
    requesterSnssais := strings.Split(query.Get("requesterSnssais"), ",")
    plmnSpecificSnssaiList := strings.Split(query.Get("plmnSpecificSnssaiList"), ",")
    dnn := query.Get("dnn")
    nsiList := strings.Split(query.Get("nsiList"), ",")
    smfServingArea := query.Get("smfServingArea")
    tai := query.Get("tai")
    amfRegionId := query.Get("amfRegionId")
    amfSetId := query.Get("amfSetId")
    guami := query.Get("guami")
    supi := query.Get("supi")
    ueIpv4Address := query.Get("ueIpv4Address")
    ipDomain := query.Get("ipDomain")
    ueIpv6Prefix := query.Get("ueIpv6Prefix")
    pgwInd := query.Get("pgwInd")
    pgw := query.Get("pgw")
    gpsi := query.Get("gpsi")
    externalGroupIdentity := query.Get("externalGroupIdentity")
    internalGroupIdentity := query.Get("internalGroupIdentity")
    pfdData := query.Get("pfdData")
    dataSet := query.Get("dataSet")
    routingIndicator := query.Get("routingIndicator")
    groupIdList := strings.Split(query.Get("groupIdList"), ",")
    dnaiList := strings.Split(query.Get("dnaiList"), ",")
    pduSessionTypes := strings.Split(query.Get("pduSessionTypes"), ",")
    eventIdList := strings.Split(query.Get("eventIdList"), ",")
    nwdafEventList := strings.Split(query.Get("nwdafEventList"), ",")
    supportedFeatures := query.Get("supportedFeatures")
    upfIwkEpsInd := query.Get("upfIwkEpsInd")
    chfSupportedPlmn := query.Get("chfSupportedPlmn")
    preferredLocality := query.Get("preferredLocality")
    accessType := query.Get("accessType")
    limit := query.Get("limit")
    requiredFeatures := strings.Split(query.Get("requiredFeatures"), ",")
    complexQuery := query.Get("complexQuery")
    maxPayloadSize := query.Get("maxPayloadSize")
    atsssCapability := query.Get("atsssCapability")
    upfUeIpAddrInd := query.Get("upfUeIpAddrInd")
    clientType := query.Get("clientType")
    lmfId := query.Get("lmfId")
    anNodeType := query.Get("anNodeType")
    ratType := query.Get("ratType")
    preferredTai := query.Get("preferredTai")
    preferredNfInstances := strings.Split(query.Get("preferredNfInstances"), ",")
    ifNoneMatch := r.Header.Get("ifNoneMatch")
    targetSnpn := query.Get("targetSnpn")
    afEeData := query.Get("afEeData")
    wAgfInfo := query.Get("wAgfInfo")
    tngfInfo := query.Get("tngfInfo")
    twifInfo := query.Get("twifInfo")
    targetNfSetId := query.Get("targetNfSetId")
    targetNfServiceSetId := query.Get("targetNfServiceSetId")
    nefId := query.Get("nefId")
    notificationType := query.Get("notificationType")
    servingScope := strings.Split(query.Get("servingScope"), ",")
    imsi := query.Get("imsi")
    preferredApiVersions := query.Get("preferredApiVersions")
    v2xSupportInd := query.Get("v2xSupportInd")
    redundantGtpu := query.Get("redundantGtpu")
    redundantTransport := query.Get("redundantTransport")
    result, err := c.service.SearchNFInstances(targetNfType, requesterNfType, acceptEncoding, requesterNfInstanceId, serviceNames, requesterNfInstanceFqdn, targetPlmnList, requesterPlmnList, targetNfInstanceId, targetNfFqdn, hnrfUri, snssais, requesterSnssais, plmnSpecificSnssaiList, dnn, nsiList, smfServingArea, tai, amfRegionId, amfSetId, guami, supi, ueIpv4Address, ipDomain, ueIpv6Prefix, pgwInd, pgw, gpsi, externalGroupIdentity, internalGroupIdentity, pfdData, dataSet, routingIndicator, groupIdList, dnaiList, pduSessionTypes, eventIdList, nwdafEventList, supportedFeatures, upfIwkEpsInd, chfSupportedPlmn, preferredLocality, accessType, limit, requiredFeatures, complexQuery, maxPayloadSize, atsssCapability, upfUeIpAddrInd, clientType, lmfId, anNodeType, ratType, preferredTai, preferredNfInstances, ifNoneMatch, targetSnpn, afEeData, wAgfInfo, tngfInfo, twifInfo, targetNfSetId, targetNfServiceSetId, nefId, notificationType, servingScope, imsi, preferredApiVersions, v2xSupportInd, redundantGtpu, redundantTransport)
    if err != nil {
        w.WriteHeader(500)
        return
    }

    EncodeJSONResponse(result, nil, w)
}
